let promiseTree = new Promise((resolve, reject) => {
    resolve("a");
    console.log("1");
    setTimeout(() => {
        console.log("2");
    }, 0);
    console.log("3");
});

// порядок вывода - '1' - '3' - '2'

// порядок выполнения


// let promiseTree = new Promise((resolve, reject) => { // промис создается синхронно. тело коллбека также будет выполнено синхронно
//    resolve("a");
//    console.log("1"); // залогируется первым как синхронный код
//    setTimeout(() => {
//        console.log("2"); // исполнится после джругих консольлогов. это произойдет потому, что пустой call stack и у нас есть что-то в макротасках. микротасок в текущем примере даже не создается
//    }, 0); // коллбек будет отдан браузеру для запоминания и последующего размещения в макротасках. нужно помнить, что число, переданное вторым аргументом, не означает, что ровно через этот промежуток времени коллбек попадет в макротаски и будет исполнить. браузер обязуется по крайней мере через этот промежуток времени разместить в макротасках функцию и после исполнить
//    console.log("3"); // залогируется после "1" как синхронный код
// });
