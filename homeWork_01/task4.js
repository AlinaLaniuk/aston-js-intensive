// Написать функцию глубокого сравнения двух объектов:
const Z = {
    prop1: 5
};

const obj1 = {
    here: {
        is: "on",
        other: "3"
    },
    object: Z
};

const obj2 = {
    here: {
        is: "on",
        other: "2"
    },
    object: Z
};

const deepEqual = (obj1, obj2) => {
    for (let key in obj1) {
        if (isObject(obj1[key])) {
            if (!deepEqual(obj1[key], obj2[key])) {
                return false;
            }
            continue;
        }
        if (obj1[key] !== obj2[key]) {
            return false;
        }
    }
    return true;
};


const isObject = (object) => {
    return object != null && typeof object === "object";
};

// универсальную функцию глубоко сравнения написать нельзя. Это функция пишется под конкретные задачи.
// чаще всего предполагается, что сравниваемые объекты имеют одинаковую структуру.
// объекты одинаковые, если во всех вложенных объектах во всех полях значения одинаковые. Вложенные объекты могут быть разными, а могут быть и одним и тем же (так, здесь here ссылается на разные объекты, а object - на один и тот же).
// Symbol - в объектном представлении есть descriptor. Сами по себе симболы не равны, но по дескриптору можно понять, что значение одно и то же. Вряд ли пригодится когда-либо, в этом мало смысла, но помечу.
